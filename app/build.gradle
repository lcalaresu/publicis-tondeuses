/**
 * Publicis Lawnmower Project
 *
 * HISTORY:
 *   - 05/03/2023 : File creation
 *
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // In this exercise, I used PICOCLI in order to try the tool. I hear more and more about it, and it seemed adapted
    // for our use. In a more industrial context, I would have used an older and more famous library like
    // "Google-options", "Apache CLI" or "Args4J".
    implementation 'info.picocli:picocli:4.7.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.1'

    // Apache Commons IO to read files easily, even huge files (without using all the memory)
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    // intellij annotation (for NotNull / Nullable annotation)
    implementation group: 'org.jetbrains', name: 'annotations', version: '24.0.1'
}

application {
    // Define the main class for the application.
    mainClass = 'com.publicisgroupe.lawnmower.App'
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
